0,00,00000000,0000,0000,NOP,NOP,none,none,1,4,-,-,-,-,No operation,,
1,01,00000001,0000,0001,"LD BC,d16",LD,BC,d16,3,12,-,-,-,-,Put,BByte,write
2,02,00000010,0000,0010,"LD (BC),A",LD,(BC),A,1,8,-,-,-,-,Put,BByte,write
3,03,00000011,0000,0011,INC BC,INC,BC,none,1,8,-,-,-,-,Increment register n,BByte,inc
4,04,00000100,0000,0100,INC B,INC,B,none,1,4,Z,0,H,-,Increment register n,BByte,inc
5,05,00000101,0000,0101,DEC B,DEC,B,none,1,4,Z,1,H,-,Decrement register n,BByte,dec
6,06,00000110,0000,0110,"LD B,d8",LD,B,d8,2,8,-,-,-,-,Put,BByte,write
7,07,00000111,0000,0111,RLCA,RLCA,none,none,1,4,0,0,0,C,Rotate A left. Old bit 7 to Carry flag,BByte,rotateLeft
8,08,00001000,0000,1000,"LD (a16),SP",LD,(a16),SP,3,20,-,-,-,-,Put,BByte,write
9,09,00001001,0000,1001,"ADD HL,BC",ADD,HL,BC,1,8,-,0,H,C,Add n to A,BByte,add
10,0A,00001010,0000,1010,"LD A,(BC)",LD,A,(BC),1,8,-,-,-,-,Put,BByte,write
11,0B,00001011,0000,1011,DEC BC,DEC,BC,none,1,8,-,-,-,-,Decrement register n,BByte,dec
12,0C,00001100,0000,1100,INC C,INC,C,none,1,4,Z,0,H,-,Increment register n,BByte,inc
13,0D,00001101,0000,1101,DEC C,DEC,C,none,1,4,Z,1,H,-,Decrement register n,BByte,dec
14,0E,00001110,0000,1110,"LD C,d8",LD,C,d8,2,8,-,-,-,-,Put,BByte,write
15,0F,00001111,0000,1111,RRCA,RRCA,none,none,1,4,0,0,0,C,Rotate A right; Old bit 0 to Carry flag,BByte,rotateRight
16,10,00010000,0001,0000,STOP 0,STOP,0,none,2,4,-,-,-,-,Halt CPU & LCD display until button pressed,,
17,11,00010001,0001,0001,"LD DE,d16",LD,DE,d16,3,12,-,-,-,-,Put,BByte,write
18,12,00010010,0001,0010,"LD (DE),A",LD,(DE),A,1,8,-,-,-,-,Put,BByte,write
19,13,00010011,0001,0011,INC DE,INC,DE,none,1,8,-,-,-,-,Increment register n,BByte,inc
20,14,00010100,0001,0100,INC D,INC,D,none,1,4,Z,0,H,-,Increment register n,BByte,inc
21,15,00010101,0001,0101,DEC D,DEC,D,none,1,4,Z,1,H,-,Decrement register n,BByte,dec
22,16,00010110,0001,0110,"LD D,d8",LD,D,d8,2,8,-,-,-,-,Put,BByte,write
23,17,00010111,0001,0111,RLA,RLA,none,none,1,4,0,0,0,C,Rotate A left through Carry flag,BByte,rotateLeftThroughFlag
24,18,00011000,0001,1000,JR r8,JR,r8,none,2,12,-,-,-,-,Add n to current address and jump to it; Conditional JR,,
25,19,00011001,0001,1001,"ADD HL,DE",ADD,HL,DE,1,8,-,0,H,C,Add n to A,BByte,add
26,1A,00011010,0001,1010,"LD A,(DE)",LD,A,(DE),1,8,-,-,-,-,Put,BByte,write
27,1B,00011011,0001,1011,DEC DE,DEC,DE,none,1,8,-,-,-,-,Decrement register n,BByte,dec
28,1C,00011100,0001,1100,INC E,INC,E,none,1,4,Z,0,H,-,Increment register n,BByte,inc
29,1D,00011101,0001,1101,DEC E,DEC,E,none,1,4,Z,1,H,-,Decrement register n,BByte,dec
30,1E,00011110,0001,1110,"LD E,d8",LD,E,d8,2,8,-,-,-,-,Put,BByte,write
31,1F,00011111,0001,1111,RRA,RRA,none,none,1,4,0,0,0,C,Rotate A right through Carry flag,BByte,rotateRightThroughFlag
32,20,00100000,0010,0000,"JR NZ,r8",JR,NZ,r8,2,12/8,-,-,-,-,Add n to current address and jump to it; Conditional JR,,
33,21,00100001,0010,0001,"LD HL,d16",LD,HL,d16,3,12,-,-,-,-,Put,BByte,write
34,22,00100010,0010,0010,"LD (HL+),A",LD,(HL+),A,1,8,-,-,-,-,Put,BByte,write
35,23,00100011,0010,0011,INC HL,INC,HL,none,1,8,-,-,-,-,Increment register n,BByte,inc
36,24,00100100,0010,0100,INC H,INC,H,none,1,4,Z,0,H,-,Increment register n,BByte,inc
37,25,00100101,0010,0101,DEC H,DEC,H,none,1,4,Z,1,H,-,Decrement register n,BByte,dec
38,26,00100110,0010,0110,"LD H,d8",LD,H,d8,2,8,-,-,-,-,Put,BByte,write
39,27,00100111,0010,0111,DAA,DAA,none,none,1,4,Z,-,0,C,Decimal adjust register A; This instruction adjusts register A so that the correct                 representation of Binary Coded Decimal (BCD) is obtained,,
40,28,00101000,0010,1000,"JR Z,r8",JR,Z,r8,2,12/8,-,-,-,-,Add n to current address and jump to it; Conditional JR,,
41,29,00101001,0010,1001,"ADD HL,HL",ADD,HL,HL,1,8,-,0,H,C,Add n to A,BByte,add
42,2A,00101010,0010,1010,"LD A,(HL+)",LD,A,(HL+),1,8,-,-,-,-,Put,BByte,write
43,2B,00101011,0010,1011,DEC HL,DEC,HL,none,1,8,-,-,-,-,Decrement register n,BByte,dec
44,2C,00101100,0010,1100,INC L,INC,L,none,1,4,Z,0,H,-,Increment register n,BByte,inc
45,2D,00101101,0010,1101,DEC L,DEC,L,none,1,4,Z,1,H,-,Decrement register n,BByte,dec
46,2E,00101110,0010,1110,"LD L,d8",LD,L,d8,2,8,-,-,-,-,Put,BByte,write
47,2F,00101111,0010,1111,CPL,CPL,none,none,1,4,-,1,1,-,Complement A register; (flip all bits),BByte,complement
48,30,00110000,0011,0000,"JR NC,r8",JR,NC,r8,2,12/8,-,-,-,-,Add n to current address and jump to it; Conditional JR,,
49,31,00110001,0011,0001,"LD SP,d16",LD,SP,d16,3,12,-,-,-,-,Put,BByte,write
50,32,00110010,0011,0010,"LD (HL-),A",LD,(HL-),A,1,8,-,-,-,-,Put,BByte,write
51,33,00110011,0011,0011,INC SP,INC,SP,none,1,8,-,-,-,-,Increment register n,BByte,inc
52,34,00110100,0011,0100,INC (HL),INC,(HL),none,1,12,Z,0,H,-,Increment register n,BByte,inc
53,35,00110101,0011,0101,DEC (HL),DEC,(HL),none,1,12,Z,1,H,-,Decrement register n,BByte,dec
54,36,00110110,0011,0110,"LD (HL),d8",LD,(HL),d8,2,12,-,-,-,-,Put,BByte,write
55,37,00110111,0011,0111,SCF,SCF,none,none,1,4,-,0,0,1,Set Carry flag,,
56,38,00111000,0011,1000,"JR C,r8",JR,C,r8,2,12/8,-,-,-,-,Add n to current address and jump to it; Conditional JR,,
57,39,00111001,0011,1001,"ADD HL,SP",ADD,HL,SP,1,8,-,0,H,C,Add n to A,BByte,add
58,3A,00111010,0011,1010,"LD A,(HL-)",LD,A,(HL-),1,8,-,-,-,-,Put,BByte,write
59,3B,00111011,0011,1011,DEC SP,DEC,SP,none,1,8,-,-,-,-,Decrement register n,BByte,dec
60,3C,00111100,0011,1100,INC A,INC,A,none,1,4,Z,0,H,-,Increment register n,BByte,inc
61,3D,00111101,0011,1101,DEC A,DEC,A,none,1,4,Z,1,H,-,Decrement register n,BByte,dec
62,3E,00111110,0011,1110,"LD A,d8",LD,A,d8,2,8,-,-,-,-,Put,BByte,write
63,3F,00111111,0011,1111,CCF,CCF,none,none,1,4,-,0,0,C,"Complement carry flag; If C flag is set, then reset it; If C flag is reset, then set it",,
64,40,01000000,0100,0000,"LD B,B",LD,B,B,1,4,-,-,-,-,Put,BByte,write
65,41,01000001,0100,0001,"LD B,C",LD,B,C,1,4,-,-,-,-,Put,BByte,write
66,42,01000010,0100,0010,"LD B,D",LD,B,D,1,4,-,-,-,-,Put,BByte,write
67,43,01000011,0100,0011,"LD B,E",LD,B,E,1,4,-,-,-,-,Put,BByte,write
68,44,01000100,0100,0100,"LD B,H",LD,B,H,1,4,-,-,-,-,Put,BByte,write
69,45,01000101,0100,0101,"LD B,L",LD,B,L,1,4,-,-,-,-,Put,BByte,write
70,46,01000110,0100,0110,"LD B,(HL)",LD,B,(HL),1,8,-,-,-,-,Put,BByte,write
71,47,01000111,0100,0111,"LD B,A",LD,B,A,1,4,-,-,-,-,Put,BByte,write
72,48,01001000,0100,1000,"LD C,B",LD,C,B,1,4,-,-,-,-,Put,BByte,write
73,49,01001001,0100,1001,"LD C,C",LD,C,C,1,4,-,-,-,-,Put,BByte,write
74,4A,01001010,0100,1010,"LD C,D",LD,C,D,1,4,-,-,-,-,Put,BByte,write
75,4B,01001011,0100,1011,"LD C,E",LD,C,E,1,4,-,-,-,-,Put,BByte,write
76,4C,01001100,0100,1100,"LD C,H",LD,C,H,1,4,-,-,-,-,Put,BByte,write
77,4D,01001101,0100,1101,"LD C,L",LD,C,L,1,4,-,-,-,-,Put,BByte,write
78,4E,01001110,0100,1110,"LD C,(HL)",LD,C,(HL),1,8,-,-,-,-,Put,BByte,write
79,4F,01001111,0100,1111,"LD C,A",LD,C,A,1,4,-,-,-,-,Put,BByte,write
80,50,01010000,0101,0000,"LD D,B",LD,D,B,1,4,-,-,-,-,Put,BByte,write
81,51,01010001,0101,0001,"LD D,C",LD,D,C,1,4,-,-,-,-,Put,BByte,write
82,52,01010010,0101,0010,"LD D,D",LD,D,D,1,4,-,-,-,-,Put,BByte,write
83,53,01010011,0101,0011,"LD D,E",LD,D,E,1,4,-,-,-,-,Put,BByte,write
84,54,01010100,0101,0100,"LD D,H",LD,D,H,1,4,-,-,-,-,Put,BByte,write
85,55,01010101,0101,0101,"LD D,L",LD,D,L,1,4,-,-,-,-,Put,BByte,write
86,56,01010110,0101,0110,"LD D,(HL)",LD,D,(HL),1,8,-,-,-,-,Put,BByte,write
87,57,01010111,0101,0111,"LD D,A",LD,D,A,1,4,-,-,-,-,Put,BByte,write
88,58,01011000,0101,1000,"LD E,B",LD,E,B,1,4,-,-,-,-,Put,BByte,write
89,59,01011001,0101,1001,"LD E,C",LD,E,C,1,4,-,-,-,-,Put,BByte,write
90,5A,01011010,0101,1010,"LD E,D",LD,E,D,1,4,-,-,-,-,Put,BByte,write
91,5B,01011011,0101,1011,"LD E,E",LD,E,E,1,4,-,-,-,-,Put,BByte,write
92,5C,01011100,0101,1100,"LD E,H",LD,E,H,1,4,-,-,-,-,Put,BByte,write
93,5D,01011101,0101,1101,"LD E,L",LD,E,L,1,4,-,-,-,-,Put,BByte,write
94,5E,01011110,0101,1110,"LD E,(HL)",LD,E,(HL),1,8,-,-,-,-,Put,BByte,write
95,5F,01011111,0101,1111,"LD E,A",LD,E,A,1,4,-,-,-,-,Put,BByte,write
96,60,01100000,0110,0000,"LD H,B",LD,H,B,1,4,-,-,-,-,Put,BByte,write
97,61,01100001,0110,0001,"LD H,C",LD,H,C,1,4,-,-,-,-,Put,BByte,write
98,62,01100010,0110,0010,"LD H,D",LD,H,D,1,4,-,-,-,-,Put,BByte,write
99,63,01100011,0110,0011,"LD H,E",LD,H,E,1,4,-,-,-,-,Put,BByte,write
100,64,01100100,0110,0100,"LD H,H",LD,H,H,1,4,-,-,-,-,Put,BByte,write
101,65,01100101,0110,0101,"LD H,L",LD,H,L,1,4,-,-,-,-,Put,BByte,write
102,66,01100110,0110,0110,"LD H,(HL)",LD,H,(HL),1,8,-,-,-,-,Put,BByte,write
103,67,01100111,0110,0111,"LD H,A",LD,H,A,1,4,-,-,-,-,Put,BByte,write
104,68,01101000,0110,1000,"LD L,B",LD,L,B,1,4,-,-,-,-,Put,BByte,write
105,69,01101001,0110,1001,"LD L,C",LD,L,C,1,4,-,-,-,-,Put,BByte,write
106,6A,01101010,0110,1010,"LD L,D",LD,L,D,1,4,-,-,-,-,Put,BByte,write
107,6B,01101011,0110,1011,"LD L,E",LD,L,E,1,4,-,-,-,-,Put,BByte,write
108,6C,01101100,0110,1100,"LD L,H",LD,L,H,1,4,-,-,-,-,Put,BByte,write
109,6D,01101101,0110,1101,"LD L,L",LD,L,L,1,4,-,-,-,-,Put,BByte,write
110,6E,01101110,0110,1110,"LD L,(HL)",LD,L,(HL),1,8,-,-,-,-,Put,BByte,write
111,6F,01101111,0110,1111,"LD L,A",LD,L,A,1,4,-,-,-,-,Put,BByte,write
112,70,01110000,0111,0000,"LD (HL),B",LD,(HL),B,1,8,-,-,-,-,Put,BByte,write
113,71,01110001,0111,0001,"LD (HL),C",LD,(HL),C,1,8,-,-,-,-,Put,BByte,write
114,72,01110010,0111,0010,"LD (HL),D",LD,(HL),D,1,8,-,-,-,-,Put,BByte,write
115,73,01110011,0111,0011,"LD (HL),E",LD,(HL),E,1,8,-,-,-,-,Put,BByte,write
116,74,01110100,0111,0100,"LD (HL),H",LD,(HL),H,1,8,-,-,-,-,Put,BByte,write
117,75,01110101,0111,0101,"LD (HL),L",LD,(HL),L,1,8,-,-,-,-,Put,BByte,write
118,76,01110110,0111,0110,HALT,HALT,none,none,1,4,-,-,-,-,Power down CPU until an interrupt occurs; Use this when ever possible to reduce energy consumption,,
119,77,01110111,0111,0111,"LD (HL),A",LD,(HL),A,1,8,-,-,-,-,Put,BByte,write
120,78,01111000,0111,1000,"LD A,B",LD,A,B,1,4,-,-,-,-,Put,BByte,write
121,79,01111001,0111,1001,"LD A,C",LD,A,C,1,4,-,-,-,-,Put,BByte,write
122,7A,01111010,0111,1010,"LD A,D",LD,A,D,1,4,-,-,-,-,Put,BByte,write
123,7B,01111011,0111,1011,"LD A,E",LD,A,E,1,4,-,-,-,-,Put,BByte,write
124,7C,01111100,0111,1100,"LD A,H",LD,A,H,1,4,-,-,-,-,Put,BByte,write
125,7D,01111101,0111,1101,"LD A,L",LD,A,L,1,4,-,-,-,-,Put,BByte,write
126,7E,01111110,0111,1110,"LD A,(HL)",LD,A,(HL),1,8,-,-,-,-,Put,BByte,write
127,7F,01111111,0111,1111,"LD A,A",LD,A,A,1,4,-,-,-,-,Put,BByte,write
128,80,10000000,1000,0000,"ADD A,B",ADD,A,B,1,4,Z,0,H,C,Add n to A,BByte,add
129,81,10000001,1000,0001,"ADD A,C",ADD,A,C,1,4,Z,0,H,C,Add n to A,BByte,add
130,82,10000010,1000,0010,"ADD A,D",ADD,A,D,1,4,Z,0,H,C,Add n to A,BByte,add
131,83,10000011,1000,0011,"ADD A,E",ADD,A,E,1,4,Z,0,H,C,Add n to A,BByte,add
132,84,10000100,1000,0100,"ADD A,H",ADD,A,H,1,4,Z,0,H,C,Add n to A,BByte,add
133,85,10000101,1000,0101,"ADD A,L",ADD,A,L,1,4,Z,0,H,C,Add n to A,BByte,add
134,86,10000110,1000,0110,"ADD A,(HL)",ADD,A,(HL),1,8,Z,0,H,C,Add n to A,BByte,add
135,87,10000111,1000,0111,"ADD A,A",ADD,A,A,1,4,Z,0,H,C,Add n to A,BByte,add
136,88,10001000,1000,1000,"ADC A,B",ADC,A,B,1,4,Z,0,H,C,Add n + Carry flag to A,BByte,add
137,89,10001001,1000,1001,"ADC A,C",ADC,A,C,1,4,Z,0,H,C,Add n + Carry flag to A,BByte,add
138,8A,10001010,1000,1010,"ADC A,D",ADC,A,D,1,4,Z,0,H,C,Add n + Carry flag to A,BByte,add
139,8B,10001011,1000,1011,"ADC A,E",ADC,A,E,1,4,Z,0,H,C,Add n + Carry flag to A,BByte,add
140,8C,10001100,1000,1100,"ADC A,H",ADC,A,H,1,4,Z,0,H,C,Add n + Carry flag to A,BByte,add
141,8D,10001101,1000,1101,"ADC A,L",ADC,A,L,1,4,Z,0,H,C,Add n + Carry flag to A,BByte,add
142,8E,10001110,1000,1110,"ADC A,(HL)",ADC,A,(HL),1,8,Z,0,H,C,Add n + Carry flag to A,BByte,add
143,8F,10001111,1000,1111,"ADC A,A",ADC,A,A,1,4,Z,0,H,C,Add n + Carry flag to A,BByte,add
144,90,10010000,1001,0000,SUB B,SUB,B,A,1,4,Z,1,H,C,Subtract n from A,BByte,sub
145,91,10010001,1001,0001,SUB C,SUB,C,A,1,4,Z,1,H,C,Subtract n from A,BByte,sub
146,92,10010010,1001,0010,SUB D,SUB,D,A,1,4,Z,1,H,C,Subtract n from A,BByte,sub
147,93,10010011,1001,0011,SUB E,SUB,E,A,1,4,Z,1,H,C,Subtract n from A,BByte,sub
148,94,10010100,1001,0100,SUB H,SUB,H,A,1,4,Z,1,H,C,Subtract n from A,BByte,sub
149,95,10010101,1001,0101,SUB L,SUB,L,A,1,4,Z,1,H,C,Subtract n from A,BByte,sub
150,96,10010110,1001,0110,SUB (HL),SUB,(HL),A,1,8,Z,1,H,C,Subtract n from A,BByte,sub
151,97,10010111,1001,0111,SUB A,SUB,A,A,1,4,Z,1,H,C,Subtract n from A,BByte,sub
152,98,10011000,1001,1000,"SBC A,B",SBC,A,B,1,4,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
153,99,10011001,1001,1001,"SBC A,C",SBC,A,C,1,4,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
154,9A,10011010,1001,1010,"SBC A,D",SBC,A,D,1,4,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
155,9B,10011011,1001,1011,"SBC A,E",SBC,A,E,1,4,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
156,9C,10011100,1001,1100,"SBC A,H",SBC,A,H,1,4,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
157,9D,10011101,1001,1101,"SBC A,L",SBC,A,L,1,4,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
158,9E,10011110,1001,1110,"SBC A,(HL)",SBC,A,(HL),1,8,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
159,9F,10011111,1001,1111,"SBC A,A",SBC,A,A,1,4,Z,1,H,C,Subtract n + Carry flag from A,BByte,sub
160,A0,10100000,1010,0000,AND B,AND,B,A,1,4,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
161,A1,10100001,1010,0001,AND C,AND,C,A,1,4,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
162,A2,10100010,1010,0010,AND D,AND,D,A,1,4,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
163,A3,10100011,1010,0011,AND E,AND,E,A,1,4,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
164,A4,10100100,1010,0100,AND H,AND,H,A,1,4,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
165,A5,10100101,1010,0101,AND L,AND,L,A,1,4,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
166,A6,10100110,1010,0110,AND (HL),AND,(HL),A,1,8,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
167,A7,10100111,1010,0111,AND A,AND,A,A,1,4,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
168,A8,10101000,1010,1000,XOR B,XOR,B,A,1,4,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
169,A9,10101001,1010,1001,XOR C,XOR,C,A,1,4,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
170,AA,10101010,1010,1010,XOR D,XOR,D,A,1,4,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
171,AB,10101011,1010,1011,XOR E,XOR,E,A,1,4,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
172,AC,10101100,1010,1100,XOR H,XOR,H,A,1,4,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
173,AD,10101101,1010,1101,XOR L,XOR,L,A,1,4,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
174,AE,10101110,1010,1110,XOR (HL),XOR,(HL),A,1,8,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
175,AF,10101111,1010,1111,XOR A,XOR,A,A,1,4,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
176,B0,10110000,1011,0000,OR B,OR,B,A,1,4,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
177,B1,10110001,1011,0001,OR C,OR,C,A,1,4,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
178,B2,10110010,1011,0010,OR D,OR,D,A,1,4,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
179,B3,10110011,1011,0011,OR E,OR,E,A,1,4,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
180,B4,10110100,1011,0100,OR H,OR,H,A,1,4,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
181,B5,10110101,1011,0101,OR L,OR,L,A,1,4,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
182,B6,10110110,1011,0110,OR (HL),OR,(HL),A,1,8,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
183,B7,10110111,1011,0111,OR A,OR,A,A,1,4,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
184,B8,10111000,1011,1000,CP B,CP,B,A,1,4,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
185,B9,10111001,1011,1001,CP C,CP,C,A,1,4,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
186,BA,10111010,1011,1010,CP D,CP,D,A,1,4,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
187,BB,10111011,1011,1011,CP E,CP,E,A,1,4,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
188,BC,10111100,1011,1100,CP H,CP,H,A,1,4,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
189,BD,10111101,1011,1101,CP L,CP,L,A,1,4,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
190,BE,10111110,1011,1110,CP (HL),CP,(HL),A,1,8,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
191,BF,10111111,1011,1111,CP A,CP,A,A,1,4,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,BByte,A.sub(n)
192,C0,11000000,1100,0000,RET NZ,RET,NZ,none,1,20/8,-,-,-,-,Pop two bytes from stack & jump to that address; Conditional RET,,
193,C1,11000001,1100,0001,POP BC,POP,BC,none,1,12,-,-,-,-,Pop two bytes off stack into register pair nn; Increment Stack Pointer (SP) twice,,
194,C2,11000010,1100,0010,"JP NZ,a16",JP,NZ,a16,3,16/12,-,-,-,-,Jump to address nn; nn = two byte immediate value. (LS byte first); Conditional jump,,
195,C3,11000011,1100,0011,JP a16,JP,a16,none,3,16,-,-,-,-,Jump to address nn; nn = two byte immediate value. (LS byte first); Conditional jump,,
196,C4,11000100,1100,0100,"CALL NZ,a16",CALL,NZ,a16,3,24/12,-,-,-,-,Push address of next instruction onto stack and then jump to address nn; Conditional CALL,,
197,C5,11000101,1100,0101,PUSH BC,PUSH,BC,none,1,16,-,-,-,-,Push register pair nn onto stack; Decrement Stack Pointer (SP) twice,,
198,C6,11000110,1100,0110,"ADD A,d8",ADD,A,d8,2,8,Z,0,H,C,Add n to A,BByte,add
199,C7,11000111,1100,0111,RST 00H,RST,00H,none,1,16,-,-,-,-,"Push present address onto stack; Jump to address $0000 + n; Use with: n = $00,$08,$10,$18,$20,$28,$30,$38",,
200,C8,11001000,1100,1000,RET Z,RET,Z,none,1,20/8,-,-,-,-,Pop two bytes from stack & jump to that address; Conditional RET,,
201,C9,11001001,1100,1001,RET,RET,none,none,1,16,-,-,-,-,Pop two bytes from stack & jump to that address; Conditional RET,,
202,CA,11001010,1100,1010,"JP Z,a16",JP,Z,a16,3,16/12,-,-,-,-,Jump to address nn; nn = two byte immediate value. (LS byte first); Conditional jump,,
203,CB,11001011,1100,1011,PREFIX CB,PREFIX,CB,none,1,4,-,-,-,-,,,
204,CC,11001100,1100,1100,"CALL Z,a16",CALL,Z,a16,3,24/12,-,-,-,-,Push address of next instruction onto stack and then jump to address nn; Conditional CALL,,
205,CD,11001101,1100,1101,CALL a16,CALL,a16,none,3,24,-,-,-,-,Push address of next instruction onto stack and then jump to address nn; Conditional CALL,,
206,CE,11001110,1100,1110,"ADC A,d8",ADC,A,d8,2,8,Z,0,H,C,Add n + Carry flag to A,BByte,add
207,CF,11001111,1100,1111,RST 08H,RST,08H,none,1,16,-,-,-,-,"Push present address onto stack; Jump to address $0000 + n; n = $00,$08,$10,$18,$20,$28,$30,$38",,
208,D0,11010000,1101,0000,RET NC,RET,NC,none,1,20/8,-,-,-,-,Pop two bytes from stack & jump to that address; Conditional RET,,
209,D1,11010001,1101,0001,POP DE,POP,DE,none,1,12,-,-,-,-,Pop two bytes off stack into register pair nn; Increment Stack Pointer (SP) twice,,
210,D2,11010010,1101,0010,"JP NC,a16",JP,NC,a16,3,16/12,-,-,-,-,Jump to address nn; nn = two byte immediate value. (LS byte first); Conditional jump,,
211,D3,11010011,1101,0011,none,none,none,none,,,,,,,,NONE,NONE
212,D4,11010100,1101,0100,"CALL NC,a16",CALL,NC,a16,3,24/12,-,-,-,-,Push address of next instruction onto stack and then jump to address nn; Conditional CALL,,
213,D5,11010101,1101,0101,PUSH DE,PUSH,DE,none,1,16,-,-,-,-,Push register pair nn onto stack; Decrement Stack Pointer (SP) twice,,
214,D6,11010110,1101,0110,SUB d8,SUB,d8,A,2,8,Z,1,H,C,Subtract n from A,BByte,sub
215,D7,11010111,1101,0111,RST 10H,RST,10H,none,1,16,-,-,-,-,Push present address onto stack; Jump to address $0000 + n,,
216,D8,11011000,1101,1000,RET C,RET,C,none,1,20/8,-,-,-,-,Pop two bytes from stack & jump to that address; Conditional RET,,
217,D9,11011001,1101,1001,RETI,RETI,none,none,1,16,-,-,-,-,Pop two bytes from stack & jump to that address then enable interrupts,,
218,DA,11011010,1101,1010,"JP C,a16",JP,C,a16,3,16/12,-,-,-,-,Jump to address nn; nn = two byte immediate value. (LS byte first); Conditional jump,,
219,DB,11011011,1101,1011,none,none,none,none,,,,,,,,NONE,NONE
220,DC,11011100,1101,1100,"CALL C,a16",CALL,C,a16,3,24/12,-,-,-,-,Push address of next instruction onto stack and then jump to address nn; Conditional CALL,,
221,DD,11011101,1101,1101,none,none,none,none,,,,,,,,NONE,NONE
222,DE,11011110,1101,1110,"SBC A,d8",SBC,A,d8,2,8,Z,1,H,C,Subtract n + Carry flag from A,,
223,DF,11011111,1101,1111,RST 18H,RST,18H,none,1,16,-,-,-,-,Push present address onto stack; Jump to address $0000 + n,,
224,E0,11100000,1110,0000,"LDH (a8),A",LDH,(a8),A,2,12,-,-,-,-,Put in/out of memory address +0xFF00,BByte,write
225,E1,11100001,1110,0001,POP HL,POP,HL,none,1,12,-,-,-,-,Pop two bytes off stack into register pair nn; Increment Stack Pointer (SP) twice,,
226,E2,11100010,1110,0010,"LD (C),A",LD,(C),A,2,8,-,-,-,-,Put,BByte,write
227,E3,11100011,1110,0011,none,none,none,none,,,,,,,,NONE,NONE
228,E4,11100100,1110,0100,none,none,none,none,,,,,,,,NONE,NONE
229,E5,11100101,1110,0101,PUSH HL,PUSH,HL,none,1,16,-,-,-,-,Push register pair nn onto stack; Decrement Stack Pointer (SP) twice,,
230,E6,11100110,1110,0110,AND d8,AND,d8,A,2,8,Z,0,1,0,"Logically AND n with A, result in A",BByte,AND
231,E7,11100111,1110,0111,RST 20H,RST,20H,none,1,16,-,-,-,-,"Push present address onto stack; Jump to address $0000 + n; Use with n = $00,$08,$10,$18,$20,$28,$30,$38",,
232,E8,11101000,1110,1000,"ADD SP,r8",ADD,SP,r8,2,16,0,0,H,C,Add n to A,BByte,add
233,E9,11101001,1110,1001,JP (HL),JP,(HL),none,1,4,-,-,-,-,Jump to address nn; nn = two byte immediate value. (LS byte first); Conditional jump,,
234,EA,11101010,1110,1010,"LD (a16),A",LD,(a16),A,3,16,-,-,-,-,Put,BByte,write
235,EB,11101011,1110,1011,none,none,none,none,,,,,,,,NONE,NONE
236,EC,11101100,1110,1100,none,none,none,none,,,,,,,,NONE,NONE
237,ED,11101101,1110,1101,none,none,none,none,,,,,,,,NONE,NONE
238,EE,11101110,1110,1110,XOR d8,XOR,d8,A,2,8,Z,0,0,0,"Logical exclusive OR n with register A, result in A",BByte,XOR
239,EF,11101111,1110,1111,RST 28H,RST,28H,none,1,16,-,-,-,-,Push present address onto stack; Jump to address $0000 + n,,
240,F0,11110000,1111,0000,"LDH A,(a8)",LDH,A,(a8),2,12,-,-,-,-,Put in/out of memory address +0xFF00,BByte,write
241,F1,11110001,1111,0001,POP AF,POP,AF,none,1,12,Z,N,H,C,Pop two bytes off stack into register pair nn; Increment Stack Pointer (SP) twice,,
242,F2,11110010,1111,0010,"LD A,(C)",LD,A,(C),2,8,-,-,-,-,Put,BByte,write
243,F3,11110011,1111,0011,DI,DI,none,none,1,4,-,-,-,-,This instruction disables interrupts but not immediately; Interrupts are disabled after                 instruction after DI is executed,,
244,F4,11110100,1111,0100,none,none,none,none,,,,,,,,NONE,NONE
245,F5,11110101,1111,0101,PUSH AF,PUSH,AF,none,1,16,-,-,-,-,Push register pair nn onto stack; Decrement Stack Pointer (SP) twice,,
246,F6,11110110,1111,0110,OR d8,OR,d8,A,2,8,Z,0,0,0,"Logical OR n with register A, result in A",BByte,OR
247,F7,11110111,1111,0111,RST 30H,RST,30H,none,1,16,-,-,-,-,Push present address onto stack; Jump to address $0000 + n,,
248,F8,11111000,1111,1000,"LD HL,SP+r8",LD,HL,SP+r8,2,12,0,0,H,C,Put,BByte,write
249,F9,11111001,1111,1001,"LD SP,HL",LD,SP,HL,1,8,-,-,-,-,Put,BByte,write
250,FA,11111010,1111,1010,"LD A,(a16)",LD,A,(a16),3,16,-,-,-,-,Put,BByte,write
251,FB,11111011,1111,1011,EI,EI,none,none,1,4,-,-,-,-,Enable interrupts. This intruction enables interrupts but not immediately. Interrupts                 are enabled after instruction after EI is executed,,
252,FC,11111100,1111,1100,none,none,none,none,,,,,,,,NONE,NONE
253,FD,11111101,1111,1101,none,none,none,none,,,,,,,,NONE,NONE
254,FE,11111110,1111,1110,CP d8,CP,d8,A,2,8,Z,1,H,C,Compare A with n; This is basically an A - n subtraction instruction but the results are thrown away,,
255,FF,11111111,1111,1111,RST 38H,RST,38H,none,1,16,-,-,-,-,Push present address onto stack; Jump to address $0000 + n,,