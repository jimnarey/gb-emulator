public void mainTable (int opcode) {

	switch(opcode) {

		case 0x0:
			//ins NOP
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0x1:
			//ins LD BC,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.BC.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x2:
			//ins LD (BC),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.BC.read() ).write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x3:
			//ins INC BC
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.BC.inc();



			r.PC.add(1);

			break;

		case 0x4:
			//ins INC B
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.B.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x5:
			//ins DEC B
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.B.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x6:
			//ins LD B,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.B.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x7:
			//ins RLCA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8:
			//ins LD (a16),SP
			//length 3
			//time 20
			//flags ----

			currentOpcodeCycles = 20;


			//**skipped command



			r.PC.add(3);

			break;

		case 0x9:
			//ins ADD HL,BC
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.BC.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x0A:
			//ins LD A,(BC)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.BC.read() ).read() );



			r.PC.add(1);

			break;

		case 0x0B:
			//ins DEC BC
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.BC.dec();



			r.PC.add(1);

			break;

		case 0x0C:
			//ins INC C
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.C.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x0D:
			//ins DEC C
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.C.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x0E:
			//ins LD C,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.C.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x0F:
			//ins RRCA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x10:
			//ins STOP 0
			//length 2
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(2);

			break;

		case 0x11:
			//ins LD DE,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.DE.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x12:
			//ins LD (DE),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.DE.read() ).write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x13:
			//ins INC DE
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.DE.inc();



			r.PC.add(1);

			break;

		case 0x14:
			//ins INC D
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.D.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x15:
			//ins DEC D
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.D.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x16:
			//ins LD D,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.D.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x17:
			//ins RLA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x18:
			//ins JR r8
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(2);

			break;

		case 0x19:
			//ins ADD HL,DE
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.DE.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x1A:
			//ins LD A,(DE)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.DE.read() ).read() );



			r.PC.add(1);

			break;

		case 0x1B:
			//ins DEC DE
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.DE.dec();



			r.PC.add(1);

			break;

		case 0x1C:
			//ins INC E
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.E.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x1D:
			//ins DEC E
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.E.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x1E:
			//ins LD E,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.E.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x1F:
			//ins RRA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x20:
			//ins JR NZ,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x21:
			//ins LD HL,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.HL.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x22:
			//ins LD (HL+),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x23:
			//ins INC HL
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.HL.inc();



			r.PC.add(1);

			break;

		case 0x24:
			//ins INC H
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.H.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x25:
			//ins DEC H
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.H.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x26:
			//ins LD H,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.H.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x27:
			//ins DAA
			//length 1
			//time 4
			//flags Z-0C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x28:
			//ins JR Z,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x29:
			//ins ADD HL,HL
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.HL.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x2A:
			//ins LD A,(HL+)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x2B:
			//ins DEC HL
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.HL.dec();



			r.PC.add(1);

			break;

		case 0x2C:
			//ins INC L
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.L.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x2D:
			//ins DEC L
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.L.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x2E:
			//ins LD L,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.L.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x2F:
			//ins CPL
			//length 1
			//time 4
			//flags -11-

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setN(1); 
			r.F.setH(1); 

			r.PC.add(1);

			break;

		case 0x30:
			//ins JR NC,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x31:
			//ins LD SP,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.SP.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x32:
			//ins LD (HL-),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x33:
			//ins INC SP
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.SP.inc();



			r.PC.add(1);

			break;

		case 0x34:
			//ins INC (HL)
			//length 1
			//time 12
			//flags Z0H-

			currentOpcodeCycles = 12;


			m.address( r.HL.read() ).inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x35:
			//ins DEC (HL)
			//length 1
			//time 12
			//flags Z1H-

			currentOpcodeCycles = 12;


			m.address( r.HL.read() ).dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x36:
			//ins LD (HL),d8
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			m.address( r.HL.read() ).write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x37:
			//ins SCF
			//length 1
			//time 4
			//flags -001

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(1); 

			r.PC.add(1);

			break;

		case 0x38:
			//ins JR C,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x39:
			//ins ADD HL,SP
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.SP.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x3A:
			//ins LD A,(HL-)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x3B:
			//ins DEC SP
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.SP.dec();



			r.PC.add(1);

			break;

		case 0x3C:
			//ins INC A
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.A.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x3D:
			//ins DEC A
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.A.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x3E:
			//ins LD A,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x3F:
			//ins CCF
			//length 1
			//time 4
			//flags -00C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x40:
			//ins LD B,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x41:
			//ins LD B,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x42:
			//ins LD B,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x43:
			//ins LD B,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x44:
			//ins LD B,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x45:
			//ins LD B,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x46:
			//ins LD B,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.B.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x47:
			//ins LD B,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x48:
			//ins LD C,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x49:
			//ins LD C,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x4A:
			//ins LD C,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x4B:
			//ins LD C,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x4C:
			//ins LD C,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x4D:
			//ins LD C,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x4E:
			//ins LD C,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.C.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x4F:
			//ins LD C,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x50:
			//ins LD D,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x51:
			//ins LD D,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x52:
			//ins LD D,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x53:
			//ins LD D,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x54:
			//ins LD D,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x55:
			//ins LD D,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x56:
			//ins LD D,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.D.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x57:
			//ins LD D,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x58:
			//ins LD E,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x59:
			//ins LD E,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x5A:
			//ins LD E,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x5B:
			//ins LD E,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x5C:
			//ins LD E,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x5D:
			//ins LD E,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x5E:
			//ins LD E,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.E.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x5F:
			//ins LD E,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x60:
			//ins LD H,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x61:
			//ins LD H,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x62:
			//ins LD H,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x63:
			//ins LD H,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x64:
			//ins LD H,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x65:
			//ins LD H,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x66:
			//ins LD H,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.H.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x67:
			//ins LD H,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x68:
			//ins LD L,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x69:
			//ins LD L,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x6A:
			//ins LD L,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x6B:
			//ins LD L,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x6C:
			//ins LD L,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x6D:
			//ins LD L,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x6E:
			//ins LD L,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.L.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x6F:
			//ins LD L,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x70:
			//ins LD (HL),B
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x71:
			//ins LD (HL),C
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x72:
			//ins LD (HL),D
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x73:
			//ins LD (HL),E
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x74:
			//ins LD (HL),H
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x75:
			//ins LD (HL),L
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x76:
			//ins HALT
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0x77:
			//ins LD (HL),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x78:
			//ins LD A,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x79:
			//ins LD A,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x7A:
			//ins LD A,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x7B:
			//ins LD A,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x7C:
			//ins LD A,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x7D:
			//ins LD A,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x7E:
			//ins LD A,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x7F:
			//ins LD A,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x80:
			//ins ADD A,B
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.B.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x81:
			//ins ADD A,C
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.C.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x82:
			//ins ADD A,D
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.D.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x83:
			//ins ADD A,E
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.E.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x84:
			//ins ADD A,H
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.H.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x85:
			//ins ADD A,L
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.L.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x86:
			//ins ADD A,(HL)
			//length 1
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			r.A.add( m.address( r.HL.read() ).read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x87:
			//ins ADD A,A
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.A.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x88:
			//ins ADC A,B
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x89:
			//ins ADC A,C
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8A:
			//ins ADC A,D
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8B:
			//ins ADC A,E
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8C:
			//ins ADC A,H
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8D:
			//ins ADC A,L
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8E:
			//ins ADC A,(HL)
			//length 1
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8F:
			//ins ADC A,A
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x90:
			//ins SUB B
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.B.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x91:
			//ins SUB C
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.C.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x92:
			//ins SUB D
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.D.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x93:
			//ins SUB E
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.E.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x94:
			//ins SUB H
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.H.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x95:
			//ins SUB L
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.L.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x96:
			//ins SUB (HL)
			//length 1
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			r.A.sub( m.address( r.HL.read() ).read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x97:
			//ins SUB A
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.A.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x98:
			//ins SBC A,B
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x99:
			//ins SBC A,C
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9A:
			//ins SBC A,D
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9B:
			//ins SBC A,E
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9C:
			//ins SBC A,H
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9D:
			//ins SBC A,L
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9E:
			//ins SBC A,(HL)
			//length 1
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9F:
			//ins SBC A,A
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xA0:
			//ins AND B
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA1:
			//ins AND C
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA2:
			//ins AND D
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA3:
			//ins AND E
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA4:
			//ins AND H
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA5:
			//ins AND L
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA6:
			//ins AND (HL)
			//length 1
			//time 8
			//flags Z010

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA7:
			//ins AND A
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA8:
			//ins XOR B
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA9:
			//ins XOR C
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAA:
			//ins XOR D
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAB:
			//ins XOR E
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAC:
			//ins XOR H
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAD:
			//ins XOR L
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAE:
			//ins XOR (HL)
			//length 1
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAF:
			//ins XOR A
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB0:
			//ins OR B
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB1:
			//ins OR C
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB2:
			//ins OR D
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB3:
			//ins OR E
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB4:
			//ins OR H
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB5:
			//ins OR L
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB6:
			//ins OR (HL)
			//length 1
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB7:
			//ins OR A
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB8:
			//ins CP B
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xB9:
			//ins CP C
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBA:
			//ins CP D
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBB:
			//ins CP E
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBC:
			//ins CP H
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBD:
			//ins CP L
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBE:
			//ins CP (HL)
			//length 1
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBF:
			//ins CP A
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xC0:
			//ins RET NZ
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xC1:
			//ins POP BC
			//length 1
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(1);

			break;

		case 0xC2:
			//ins JP NZ,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xC3:
			//ins JP a16
			//length 3
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(3);

			break;

		case 0xC4:
			//ins CALL NZ,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xC5:
			//ins PUSH BC
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xC6:
			//ins ADD A,d8
			//length 2
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			r.A.add( m.address( r.PC.read() + 1 ).read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xC7:
			//ins RST 00H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xC8:
			//ins RET Z
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xC9:
			//ins RET
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xCA:
			//ins JP Z,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xCB:
			//ins PREFIX CB
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xCC:
			//ins CALL Z,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xCD:
			//ins CALL a16
			//length 3
			//time 24
			//flags ----

			currentOpcodeCycles = 24;


			//**command missing



			r.PC.add(3);

			break;

		case 0xCE:
			//ins ADC A,d8
			//length 2
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xCF:
			//ins RST 08H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD0:
			//ins RET NC
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xD1:
			//ins POP DE
			//length 1
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD2:
			//ins JP NC,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xD4:
			//ins CALL NC,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xD5:
			//ins PUSH DE
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD6:
			//ins SUB d8
			//length 2
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			r.A.sub( m.address( r.PC.read() + 1 ).read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xD7:
			//ins RST 10H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD8:
			//ins RET C
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xD9:
			//ins RETI
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xDA:
			//ins JP C,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xDC:
			//ins CALL C,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xDE:
			//ins SBC A,d8
			//length 2
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xDF:
			//ins RST 18H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE0:
			//ins LDH (a8),A
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(2);

			break;

		case 0xE1:
			//ins POP HL
			//length 1
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE2:
			//ins LD (C),A
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.C.read() ).write( r.A.read() );



			r.PC.add(2);

			break;

		case 0xE5:
			//ins PUSH HL
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE6:
			//ins AND d8
			//length 2
			//time 8
			//flags Z010

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(2);

			break;

		case 0xE7:
			//ins RST 20H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE8:
			//ins ADD SP,r8
			//length 2
			//time 16
			//flags 00HC

			currentOpcodeCycles = 16;


			//**skipped


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xE9:
			//ins JP (HL)
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xEA:
			//ins LD (a16),A
			//length 3
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**skipped command



			r.PC.add(3);

			break;

		case 0xEE:
			//ins XOR d8
			//length 2
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(2);

			break;

		case 0xEF:
			//ins RST 28H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF0:
			//ins LDH A,(a8)
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(2);

			break;

		case 0xF1:
			//ins POP AF
			//length 1
			//time 12
			//flags ZNHC

			currentOpcodeCycles = 12;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(N); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xF2:
			//ins LD A,(C)
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.C.read() ).read() );



			r.PC.add(2);

			break;

		case 0xF3:
			//ins DI
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF5:
			//ins PUSH AF
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF6:
			//ins OR d8
			//length 2
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(2);

			break;

		case 0xF7:
			//ins RST 30H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF8:
			//ins LD HL,SP+r8
			//length 2
			//time 12
			//flags 00HC

			currentOpcodeCycles = 12;


			//**skipped command


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xF9:
			//ins LD SP,HL
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.SP.write( r.HL.read() );



			r.PC.add(1);

			break;

		case 0xFA:
			//ins LD A,(a16)
			//length 3
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**skipped command



			r.PC.add(3);

			break;

		case 0xFB:
			//ins EI
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xFE:
			//ins CP d8
			//length 2
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xFF:
			//ins RST 38H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;


}
}

public void cBTable (int opcode) {

	switch(opcode) {

		case 0x0:
			//ins NOP
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0x1:
			//ins LD BC,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.BC.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x2:
			//ins LD (BC),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.BC.read() ).write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x3:
			//ins INC BC
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.BC.inc();



			r.PC.add(1);

			break;

		case 0x4:
			//ins INC B
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.B.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x5:
			//ins DEC B
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.B.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x6:
			//ins LD B,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.B.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x7:
			//ins RLCA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8:
			//ins LD (a16),SP
			//length 3
			//time 20
			//flags ----

			currentOpcodeCycles = 20;


			//**skipped command



			r.PC.add(3);

			break;

		case 0x9:
			//ins ADD HL,BC
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.BC.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x0A:
			//ins LD A,(BC)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.BC.read() ).read() );



			r.PC.add(1);

			break;

		case 0x0B:
			//ins DEC BC
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.BC.dec();



			r.PC.add(1);

			break;

		case 0x0C:
			//ins INC C
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.C.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x0D:
			//ins DEC C
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.C.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x0E:
			//ins LD C,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.C.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x0F:
			//ins RRCA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x10:
			//ins STOP 0
			//length 2
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(2);

			break;

		case 0x11:
			//ins LD DE,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.DE.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x12:
			//ins LD (DE),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.DE.read() ).write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x13:
			//ins INC DE
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.DE.inc();



			r.PC.add(1);

			break;

		case 0x14:
			//ins INC D
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.D.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x15:
			//ins DEC D
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.D.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x16:
			//ins LD D,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.D.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x17:
			//ins RLA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x18:
			//ins JR r8
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(2);

			break;

		case 0x19:
			//ins ADD HL,DE
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.DE.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x1A:
			//ins LD A,(DE)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.DE.read() ).read() );



			r.PC.add(1);

			break;

		case 0x1B:
			//ins DEC DE
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.DE.dec();



			r.PC.add(1);

			break;

		case 0x1C:
			//ins INC E
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.E.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x1D:
			//ins DEC E
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.E.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x1E:
			//ins LD E,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.E.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x1F:
			//ins RRA
			//length 1
			//time 4
			//flags 000C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x20:
			//ins JR NZ,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x21:
			//ins LD HL,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.HL.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x22:
			//ins LD (HL+),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x23:
			//ins INC HL
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.HL.inc();



			r.PC.add(1);

			break;

		case 0x24:
			//ins INC H
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.H.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x25:
			//ins DEC H
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.H.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x26:
			//ins LD H,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.H.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x27:
			//ins DAA
			//length 1
			//time 4
			//flags Z-0C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x28:
			//ins JR Z,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x29:
			//ins ADD HL,HL
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.HL.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x2A:
			//ins LD A,(HL+)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x2B:
			//ins DEC HL
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.HL.dec();



			r.PC.add(1);

			break;

		case 0x2C:
			//ins INC L
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.L.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x2D:
			//ins DEC L
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.L.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x2E:
			//ins LD L,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.L.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x2F:
			//ins CPL
			//length 1
			//time 4
			//flags -11-

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setN(1); 
			r.F.setH(1); 

			r.PC.add(1);

			break;

		case 0x30:
			//ins JR NC,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x31:
			//ins LD SP,d16
			//length 3
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			r.SP.write( new Short( m.address( r.PC.read() + 1 ), m.address( r.PC.read() + 2 ) ).read() );



			r.PC.add(3);

			break;

		case 0x32:
			//ins LD (HL-),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x33:
			//ins INC SP
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.SP.inc();



			r.PC.add(1);

			break;

		case 0x34:
			//ins INC (HL)
			//length 1
			//time 12
			//flags Z0H-

			currentOpcodeCycles = 12;


			m.address( r.HL.read() ).inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x35:
			//ins DEC (HL)
			//length 1
			//time 12
			//flags Z1H-

			currentOpcodeCycles = 12;


			m.address( r.HL.read() ).dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x36:
			//ins LD (HL),d8
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			m.address( r.HL.read() ).write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x37:
			//ins SCF
			//length 1
			//time 4
			//flags -001

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(1); 

			r.PC.add(1);

			break;

		case 0x38:
			//ins JR C,r8
			//length 2
			//time 12/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;12/8


			//**command missing



			r.PC.add(2);

			break;

		case 0x39:
			//ins ADD HL,SP
			//length 1
			//time 8
			//flags -0HC

			currentOpcodeCycles = 8;


			r.HL.add( r.SP.read() );


			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x3A:
			//ins LD A,(HL-)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			//**skipped command



			r.PC.add(1);

			break;

		case 0x3B:
			//ins DEC SP
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.SP.dec();



			r.PC.add(1);

			break;

		case 0x3C:
			//ins INC A
			//length 1
			//time 4
			//flags Z0H-

			currentOpcodeCycles = 4;


			r.A.inc();


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x3D:
			//ins DEC A
			//length 1
			//time 4
			//flags Z1H-

			currentOpcodeCycles = 4;


			r.A.dec();


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 

			r.PC.add(1);

			break;

		case 0x3E:
			//ins LD A,d8
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.PC.read() + 1 ).read() );



			r.PC.add(2);

			break;

		case 0x3F:
			//ins CCF
			//length 1
			//time 4
			//flags -00C

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x40:
			//ins LD B,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x41:
			//ins LD B,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x42:
			//ins LD B,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x43:
			//ins LD B,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x44:
			//ins LD B,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x45:
			//ins LD B,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x46:
			//ins LD B,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.B.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x47:
			//ins LD B,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.B.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x48:
			//ins LD C,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x49:
			//ins LD C,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x4A:
			//ins LD C,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x4B:
			//ins LD C,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x4C:
			//ins LD C,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x4D:
			//ins LD C,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x4E:
			//ins LD C,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.C.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x4F:
			//ins LD C,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.C.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x50:
			//ins LD D,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x51:
			//ins LD D,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x52:
			//ins LD D,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x53:
			//ins LD D,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x54:
			//ins LD D,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x55:
			//ins LD D,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x56:
			//ins LD D,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.D.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x57:
			//ins LD D,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.D.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x58:
			//ins LD E,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x59:
			//ins LD E,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x5A:
			//ins LD E,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x5B:
			//ins LD E,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x5C:
			//ins LD E,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x5D:
			//ins LD E,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x5E:
			//ins LD E,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.E.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x5F:
			//ins LD E,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.E.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x60:
			//ins LD H,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x61:
			//ins LD H,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x62:
			//ins LD H,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x63:
			//ins LD H,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x64:
			//ins LD H,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x65:
			//ins LD H,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x66:
			//ins LD H,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.H.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x67:
			//ins LD H,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.H.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x68:
			//ins LD L,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x69:
			//ins LD L,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x6A:
			//ins LD L,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x6B:
			//ins LD L,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x6C:
			//ins LD L,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x6D:
			//ins LD L,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x6E:
			//ins LD L,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.L.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x6F:
			//ins LD L,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.L.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x70:
			//ins LD (HL),B
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x71:
			//ins LD (HL),C
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x72:
			//ins LD (HL),D
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x73:
			//ins LD (HL),E
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x74:
			//ins LD (HL),H
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x75:
			//ins LD (HL),L
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x76:
			//ins HALT
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0x77:
			//ins LD (HL),A
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.HL.read() ).write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x78:
			//ins LD A,B
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.B.read() );



			r.PC.add(1);

			break;

		case 0x79:
			//ins LD A,C
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.C.read() );



			r.PC.add(1);

			break;

		case 0x7A:
			//ins LD A,D
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.D.read() );



			r.PC.add(1);

			break;

		case 0x7B:
			//ins LD A,E
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.E.read() );



			r.PC.add(1);

			break;

		case 0x7C:
			//ins LD A,H
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.H.read() );



			r.PC.add(1);

			break;

		case 0x7D:
			//ins LD A,L
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.L.read() );



			r.PC.add(1);

			break;

		case 0x7E:
			//ins LD A,(HL)
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.HL.read() ).read() );



			r.PC.add(1);

			break;

		case 0x7F:
			//ins LD A,A
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			r.A.write( r.A.read() );



			r.PC.add(1);

			break;

		case 0x80:
			//ins ADD A,B
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.B.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x81:
			//ins ADD A,C
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.C.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x82:
			//ins ADD A,D
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.D.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x83:
			//ins ADD A,E
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.E.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x84:
			//ins ADD A,H
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.H.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x85:
			//ins ADD A,L
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.L.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x86:
			//ins ADD A,(HL)
			//length 1
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			r.A.add( m.address( r.HL.read() ).read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x87:
			//ins ADD A,A
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			r.A.add( r.A.read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x88:
			//ins ADC A,B
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x89:
			//ins ADC A,C
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8A:
			//ins ADC A,D
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8B:
			//ins ADC A,E
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8C:
			//ins ADC A,H
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8D:
			//ins ADC A,L
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8E:
			//ins ADC A,(HL)
			//length 1
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x8F:
			//ins ADC A,A
			//length 1
			//time 4
			//flags Z0HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x90:
			//ins SUB B
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.B.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x91:
			//ins SUB C
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.C.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x92:
			//ins SUB D
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.D.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x93:
			//ins SUB E
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.E.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x94:
			//ins SUB H
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.H.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x95:
			//ins SUB L
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.L.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x96:
			//ins SUB (HL)
			//length 1
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			r.A.sub( m.address( r.HL.read() ).read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x97:
			//ins SUB A
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			r.A.sub( r.A.read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x98:
			//ins SBC A,B
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x99:
			//ins SBC A,C
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9A:
			//ins SBC A,D
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9B:
			//ins SBC A,E
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9C:
			//ins SBC A,H
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9D:
			//ins SBC A,L
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9E:
			//ins SBC A,(HL)
			//length 1
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0x9F:
			//ins SBC A,A
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xA0:
			//ins AND B
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA1:
			//ins AND C
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA2:
			//ins AND D
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA3:
			//ins AND E
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA4:
			//ins AND H
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA5:
			//ins AND L
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA6:
			//ins AND (HL)
			//length 1
			//time 8
			//flags Z010

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA7:
			//ins AND A
			//length 1
			//time 4
			//flags Z010

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA8:
			//ins XOR B
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xA9:
			//ins XOR C
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAA:
			//ins XOR D
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAB:
			//ins XOR E
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAC:
			//ins XOR H
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAD:
			//ins XOR L
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAE:
			//ins XOR (HL)
			//length 1
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xAF:
			//ins XOR A
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB0:
			//ins OR B
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB1:
			//ins OR C
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB2:
			//ins OR D
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB3:
			//ins OR E
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB4:
			//ins OR H
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB5:
			//ins OR L
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB6:
			//ins OR (HL)
			//length 1
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB7:
			//ins OR A
			//length 1
			//time 4
			//flags Z000

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(1);

			break;

		case 0xB8:
			//ins CP B
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xB9:
			//ins CP C
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBA:
			//ins CP D
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBB:
			//ins CP E
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBC:
			//ins CP H
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBD:
			//ins CP L
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBE:
			//ins CP (HL)
			//length 1
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xBF:
			//ins CP A
			//length 1
			//time 4
			//flags Z1HC

			currentOpcodeCycles = 4;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xC0:
			//ins RET NZ
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xC1:
			//ins POP BC
			//length 1
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(1);

			break;

		case 0xC2:
			//ins JP NZ,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xC3:
			//ins JP a16
			//length 3
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(3);

			break;

		case 0xC4:
			//ins CALL NZ,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xC5:
			//ins PUSH BC
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xC6:
			//ins ADD A,d8
			//length 2
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			r.A.add( m.address( r.PC.read() + 1 ).read() );


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xC7:
			//ins RST 00H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xC8:
			//ins RET Z
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xC9:
			//ins RET
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xCA:
			//ins JP Z,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xCB:
			//ins PREFIX CB
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xCC:
			//ins CALL Z,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xCD:
			//ins CALL a16
			//length 3
			//time 24
			//flags ----

			currentOpcodeCycles = 24;


			//**command missing



			r.PC.add(3);

			break;

		case 0xCE:
			//ins ADC A,d8
			//length 2
			//time 8
			//flags Z0HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xCF:
			//ins RST 08H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD0:
			//ins RET NC
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xD1:
			//ins POP DE
			//length 1
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD2:
			//ins JP NC,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xD4:
			//ins CALL NC,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xD5:
			//ins PUSH DE
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD6:
			//ins SUB d8
			//length 2
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			r.A.sub( m.address( r.PC.read() + 1 ).read() );


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xD7:
			//ins RST 10H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xD8:
			//ins RET C
			//length 1
			//time 20/8
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;20/8


			//**command missing



			r.PC.add(1);

			break;

		case 0xD9:
			//ins RETI
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xDA:
			//ins JP C,a16
			//length 3
			//time 16/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;16/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xDC:
			//ins CALL C,a16
			//length 3
			//time 24/12
			//flags ----

			//**currentOpcodeCycles = CONDITIONAL;24/12


			//**command missing



			r.PC.add(3);

			break;

		case 0xDE:
			//ins SBC A,d8
			//length 2
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xDF:
			//ins RST 18H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE0:
			//ins LDH (a8),A
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(2);

			break;

		case 0xE1:
			//ins POP HL
			//length 1
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE2:
			//ins LD (C),A
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			m.address( r.C.read() ).write( r.A.read() );



			r.PC.add(2);

			break;

		case 0xE5:
			//ins PUSH HL
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE6:
			//ins AND d8
			//length 2
			//time 8
			//flags Z010

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(1); 
			r.F.setC(0); 

			r.PC.add(2);

			break;

		case 0xE7:
			//ins RST 20H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xE8:
			//ins ADD SP,r8
			//length 2
			//time 16
			//flags 00HC

			currentOpcodeCycles = 16;


			//**skipped


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xE9:
			//ins JP (HL)
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xEA:
			//ins LD (a16),A
			//length 3
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**skipped command



			r.PC.add(3);

			break;

		case 0xEE:
			//ins XOR d8
			//length 2
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(2);

			break;

		case 0xEF:
			//ins RST 28H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF0:
			//ins LDH A,(a8)
			//length 2
			//time 12
			//flags ----

			currentOpcodeCycles = 12;


			//**command missing



			r.PC.add(2);

			break;

		case 0xF1:
			//ins POP AF
			//length 1
			//time 12
			//flags ZNHC

			currentOpcodeCycles = 12;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(N); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(1);

			break;

		case 0xF2:
			//ins LD A,(C)
			//length 2
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.A.write( m.address( r.C.read() ).read() );



			r.PC.add(2);

			break;

		case 0xF3:
			//ins DI
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF5:
			//ins PUSH AF
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF6:
			//ins OR d8
			//length 2
			//time 8
			//flags Z000

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(0); 
			r.F.setH(0); 
			r.F.setC(0); 

			r.PC.add(2);

			break;

		case 0xF7:
			//ins RST 30H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;

		case 0xF8:
			//ins LD HL,SP+r8
			//length 2
			//time 12
			//flags 00HC

			currentOpcodeCycles = 12;


			//**skipped command


			r.F.setZ(0); 
			r.F.setN(0); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xF9:
			//ins LD SP,HL
			//length 1
			//time 8
			//flags ----

			currentOpcodeCycles = 8;


			r.SP.write( r.HL.read() );



			r.PC.add(1);

			break;

		case 0xFA:
			//ins LD A,(a16)
			//length 3
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**skipped command



			r.PC.add(3);

			break;

		case 0xFB:
			//ins EI
			//length 1
			//time 4
			//flags ----

			currentOpcodeCycles = 4;


			//**command missing



			r.PC.add(1);

			break;

		case 0xFE:
			//ins CP d8
			//length 2
			//time 8
			//flags Z1HC

			currentOpcodeCycles = 8;


			//**command missing


			r.F.setZ(Z); 
			r.F.setN(1); 
			r.F.setH(H); 
			r.F.setC(C); 

			r.PC.add(2);

			break;

		case 0xFF:
			//ins RST 38H
			//length 1
			//time 16
			//flags ----

			currentOpcodeCycles = 16;


			//**command missing



			r.PC.add(1);

			break;


}
}

